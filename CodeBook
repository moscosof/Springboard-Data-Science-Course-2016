
## Data Wrangling Project

#File descriptions:
#train.csv - the training set, contains the Response values
#test.csv - the test set, you must predict the Response variable for all rows in this file
#sample_submission.csv - a sample submission file in the correct format


Variable	Description
Id	A unique identifier associated with an application.
Product_Info_1-7	A set of normalized variables relating to the product applied for
Ins_Age	Normalized age of applicant
Ht	Normalized height of applicant
Wt	Normalized weight of applicant
BMI	Normalized BMI of applicant
Employment_Info_1-6	A set of normalized variables relating to the employment history of the applicant.
InsuredInfo_1-6	A set of normalized variables providing information about the applicant.
Insurance_History_1-9	A set of normalized variables relating to the insurance history of the applicant.
Family_Hist_1-5	A set of normalized variables relating to the family history of the applicant.
Medical_History_1-41	A set of normalized variables relating to the medical history of the applicant.
Medical_Keyword_1-48	A set of dummy variables relating to the presence of/absence of a medical keyword being
associated with the application.
Response	This is the target variable, an ordinal variable relating to the final decision associated with an application

The following variables are all categorical (nominal):
Product_Info_1, Product_Info_2, Product_Info_3, Product_Info_5, Product_Info_6, Product_Info_7, Employment_Info_2, 
Employment_Info_3, Employment_Info_5, InsuredInfo_1, InsuredInfo_2, InsuredInfo_3, InsuredInfo_4, InsuredInfo_5, InsuredInfo_6,
InsuredInfo_7, Insurance_History_1, Insurance_History_2, Insurance_History_3, Insurance_History_4, Insurance_History_7, 
Insurance_History_8, Insurance_History_9, Family_Hist_1, Medical_History_2, Medical_History_3, Medical_History_4, 
Medical_History_5, Medical_History_6, Medical_History_7, Medical_History_8, Medical_History_9, Medical_History_11,
Medical_History_12, Medical_History_13, Medical_History_14, Medical_History_16, Medical_History_17, Medical_History_18,
Medical_History_19, Medical_History_20, Medical_History_21, Medical_History_22, Medical_History_23, Medical_History_25,
Medical_History_26, Medical_History_27, Medical_History_28, Medical_History_29, Medical_History_30, Medical_History_31, 
Medical_History_33, Medical_History_34, Medical_History_35, Medical_History_36, Medical_History_37, Medical_History_38,
Medical_History_39, Medical_History_40, Medical_History_41

The following variables are continuous:
Product_Info_4, Ins_Age, Ht, Wt, BMI, Employment_Info_1, Employment_Info_4, Employment_Info_6, Insurance_History_5, 
Family_Hist_2, Family_Hist_3, Family_Hist_4, Family_Hist_5

The following variables are discrete:
Medical_History_1, Medical_History_10, Medical_History_15, Medical_History_24, Medical_History_32

Medical_Keyword_1-48 are dummy variables.


# Load raw data to 'train' and 'test' repositories
train <- read.csv("train.csv", header = TRUE)
test <-  read.csv("test.csv", header = TRUE)

# Number of rows in 'train'
nrow(train)
[1] 59381

# Number of rows in 'test'
> nrow(test)
[1] 19765

# Number of columns in 'train'
> ncol(train)
[1] 128

# Number of columns in 'test'
> ncol(test)
[1] 127

# Combine 'train' and 'test':  
# Since 'train' has one more extra column "Response" as the last column, a new
# column "Response" needs to added to 'test' as well. Therefore, both tables will have the
# same number of columns.

# Create a new data frame called 'test.response' starting with the current repository 'test' 
# and adding to each row a NA value that will represent the new column 'Response' (last column).
# rep(NA, nrow(test)) represents a vector with the same number of elements as rows in test and 
# with a value NA as a default. 

> test.response = data.frame(test[,], Response = rep(NA, nrow(test)))

# The new number of columns in 'test' after adding column 'Response':
> ncol(test.response)
[1] 128

> nrow(test.response)
[1] 19765

# A ramdom test to see the new column 'Response'(column 128) value(NA) in test.response
[1] NA
> test.response[1,128]
[1] NA
> test.response[19765, 128]
[1] NA

# Now that 'train' and 'test.response' have the same number of columns, we can proceed to 
# combined both tables using rbind function.  

data.combined <- rbind(train, test.response)

# The new data frame 'data.combined' now has a total number of row of 79146 (19765 + 59381).
# 19765 observations from 'test.response' and 59381 from 'train'.
> nrow(data.combined)
[1] 79146

# The mean of column Age in table 'test'
> mean(test[,"Ins_Age"])
[1] 0.4149012

#Create data frame 'PersonalData' with fields "Ins_Age" "Ht" "Wt" "BMI". Omit NA values  
PersonalData <- na.omit(select(train,9:12, 128))

# Sum 'Response' values for Ins_Age = 0
> filter(PersonalData,  Ins_Age == 0) %>% summarise(sum(Response))
  sum(Response)
1 1769

# Count entries for Ins_age = 0
> filter(PersonalData,  Ins_Age == 0) %>% summarise(n())
  n()
1 287

# Group by Ins_Age and create variable Count_InsAge that counts the number of entries per Age group
# Returns 2 columns: Ins_Age Count_InsAge
> CountGroupAge <- 
  PersonalData %>% 
  group_by(Ins_Age) %>% 
  summarise(Count_InsAge=n())
  
> CountGroupAge
Source: local data frame [65 x 2]

      Ins_Age Count_InsAge
        (dbl)        (int)
1  0.00000000          287
2  0.01492537          248
3  0.02985075          288
4  0.04477612          385
5  0.05970149          490
6  0.07462687          605
7  0.08955224          922
8  0.10447761          787
9  0.11940299          839
10 0.13432836          993
..        ...          ...  
  
# Group by Age and calculate the mean for the remaining columns (Ht, Wt, BMI and Response)
> Group_by_Age <- 
  PersonalData %>% 
  group_by(Ins_Age) %>% 
  summarise_each(funs(mean))
  
> Group_by_Age
Source: local data frame [65 x 5]

      Ins_Age        Ht        Wt       BMI Response
        (dbl)     (dbl)     (dbl)     (dbl)    (dbl)
1  0.00000000 0.6947735 0.2452072 0.3994403 6.163763
2  0.01492537 0.7038123 0.2579802 0.4139813 5.935484
3  0.02985075 0.6957071 0.2571260 0.4219122 5.972222
4  0.04477612 0.6980401 0.2556214 0.4149987 6.275325
5  0.05970149 0.6953247 0.2583895 0.4228910 6.093878
6  0.07462687 0.6913899 0.2540268 0.4197052 6.231405
7  0.08955224 0.7042004 0.2705234 0.4346929 6.258134
8  0.10447761 0.7021601 0.2698054 0.4345143 6.151207
9  0.11940299 0.7029364 0.2705577 0.4360935 6.488677
10 0.13432836 0.7041838 0.2794372 0.4511306 6.221551
..        ...       ...       ...       ...      ...  

# Group by Age and calculates Ht, Wt, BMI and Response average. Descending Sort
# by Average Response. This will tell what age scored higher than others.
Group_by_Age <- 
  PersonalData %>% 
  group_by(Ins_Age) %>% 
  summarise(Avg_Ht=mean(Ht),Avg_Wt=mean(Wt),
            Avg_BMI=mean(BMI),Avg_Response=mean(Response)) %>%
            arrange(desc(Avg_Response))  
            
> Group_by_Age
Source: local data frame [65 x 5]

      Ins_Age    Avg_Ht    Avg_Wt   Avg_BMI Avg_Response
        (dbl)     (dbl)     (dbl)     (dbl)        (dbl)
1  0.11940299 0.7029364 0.2705577 0.4360935     6.488677
2  0.17910448 0.7011381 0.2758509 0.4464408     6.315234
3  0.16417910 0.7112668 0.2828675 0.4486665     6.290164
4  0.04477612 0.6980401 0.2556214 0.4149987     6.275325
5  0.14925373 0.7042977 0.2780389 0.4455479     6.261841
6  0.08955224 0.7042004 0.2705234 0.4346929     6.258134
7  0.07462687 0.6913899 0.2540268 0.4197052     6.231405
8  0.13432836 0.7041838 0.2794372 0.4511306     6.221551
9  0.20895522 0.7094545 0.2820921 0.4486803     6.211429
10 0.19402985 0.7102081 0.2836218 0.4504885     6.174207
..        ...       ...       ...       ...          ...            
            

  
  
  
  
  
  
